@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IJSRuntime js

<button type="button" class="btn btn-outline-light" title="Access your secret seed." data-backdrop="false" data-toggle="modal" data-target="#keyModal" @onclick="() => ShowBackdrop = !ShowBackdrop">
    <i class="mdi mdi-key"></i> Key
</button>
@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}
<div class="modal fade" id="keyModal" tabindex="-1" role="dialog" aria-labelledby="keyModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="keyModalLabel">Notifications</h5>
                <button type="button" class="close text-danger" data-dismiss="modal" aria-label="Close" @onclick="() => ShowBackdrop = false">
                    <i class="mdi mdi-close"></i>
                </button>
            </div>
            <div class="modal-body">
                @if (string.IsNullOrEmpty(EncryptedSecret))
                {
                    <h5 class="text-center">You do not have a secret seed encrypted.</h5>
                    <p class="lead text-center">Set your secret seed to access it more quickly.</p>
                    <div class="form-group">
                        <label>Secret Seed:</label>
                        <input class="form-control" type="password" @bind-value="SecretSeed" />
                    </div>
                    <div class="form-group">
                        <label>Pin Code:</label>
                        <input class="form-control" type="password" minlength="4" @bind-value="PinCode" />
                    </div>
                    <button type="button" class="btn btn-success" @onclick="SetSecret">Submit</button>
                }
                else
                {
                    <div class="form-group">
                        <label>Pin Code:</label>
                        <input class="form-control" type="password" minlength="4" @bind-value="PinCode" />
                    </div>
                    <!--Reset code-->
                    <button type="button" class="btn btn-danger" @onclick="ResetSecret">Reset</button>
                    <button type="button" class="btn btn-success" @onclick="DecryptSecret">Submit</button>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private bool ShowBackdrop { get; set; } = false;
    private string EncryptedSecret { get; set; }
    private string SecretSeed { get; set; }
    private string PinCode { get; set; }

    protected override async Task OnInitializedAsync()
    {
        EncryptedSecret = await localStorage.GetItemAsync<string>("EncryptedSecret");
        await base.OnInitializedAsync();
    }

    private async Task SetSecret()
    {
        EncryptedSecret = await js.InvokeAsync<string>("encryptSecret", SecretSeed, PinCode);
    }

    private async Task DecryptSecret()
    {
        await js.InvokeVoidAsync("decryptSecret", PinCode);
    }

    private async Task ResetSecret()
    {
        EncryptedSecret = null;
        await localStorage.RemoveItemAsync("EncryptedSecret");
    }
}
