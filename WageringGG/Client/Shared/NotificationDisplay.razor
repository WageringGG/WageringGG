@using Microsoft.AspNetCore.SignalR.Client
@inject AuthHttp http
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IConfiguration config
@inject IJSRuntime js
@inject NavigationManager navManager
@using Humanizer

<button type="button" class="btn btn-outline-warning" title="View your notifications" data-toggle="modal" data-target="#notificationModal">
    <i class="mdi mdi-bell"></i> <span class="badge badge-warning">@Notifications.Count</span>
</button>
<div class="modal fade" id="notificationModal" tabindex="-1" role="dialog" aria-labelledby="notificationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="notificationModalLabel">Notifications</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <i class="mdi mdi-close"></i>
                </button>
            </div>
            <div class="modal-body">
                <div class="list-group list-group-flush">
                    @if (Notifications.Count == 0)
                    {
                        <p class="lead mx-auto">You have no notifications.</p>
                    }
                    else
                        foreach (PersonalNotification notification in Notifications)
                        {
                            <button class="list-group-item list-group-item-action" @onclick="() => GoTo(notification.Link)">
                                <div class="d-flex w-100 justify-content-between">
                                    @notification.Message
                                    <button class="close text-danger" @onclick="() => DeleteNotification(notification.Id)" @onclick:stopPropagation="true"><i class="mdi mdi-delete"></i></button>
                                </div>
                                <div class="d-flex align-items-end">
                                    <small class="text-muted ml-auto">
                                        @notification.Date.Humanize(true, DateTime.Now)
                                    </small>
                                </div>
                            </button>
                        }
                </div>
            </div>
        </div>
    </div>
</div>

@code{
    List<PersonalNotification> Notifications { get; set; } = new List<PersonalNotification>();

    /// <summary>
    /// Initializes NotificationDisplay
    /// </summary>
    /// <returns>async Task</returns>
    protected override async Task OnInitializedAsync()
    {
        sessionStorage.Changed += ReceiveNotification;
        await GetNotifications();
        await base.OnInitializedAsync();
    }

    private void ReceiveNotification(object sender, Blazored.SessionStorage.ChangedEventArgs e)
    {
        Console.WriteLine(e.Key);
        if (e.Key == "ReceiveNotification")
        {
            var notification = (PersonalNotification)e.NewValue;
            if (notification != null)
            {
                Notifications.Add(notification);
                StateHasChanged();
            }
        }
    }

    /// <summary>
    /// Gets localStorage notifications and last check date.
    /// A request to server is made based off of localStorage.
    /// New notifications are added to localStorage.
    /// </summary>
    /// <returns>async Task</returns>
    private async Task GetNotifications()
    {
        long? lastDate = null;
        if (await localStorage.ContainKeyAsync(config["Notification:Date"]))
        {
            lastDate = await localStorage.GetItemAsync<long>(config["Notification:Date"]);
            Notifications.AddRange(await localStorage.GetItemAsync<IEnumerable<PersonalNotification>>(config["Notification:Values"]));
        }
        Dictionary<string, string> query = new Dictionary<string, string>();
        if (lastDate.HasValue)
            query.Add("lastDate", lastDate.ToString());
        DateTime now = DateTime.Now;
        string path = Microsoft.AspNetCore.WebUtilities.QueryHelpers.AddQueryString("/api/notification", query);
        var response = await http.Client.GetAsync(path);
        if (response.IsSuccessStatusCode)
        {
            var notifications = await response.Content.ReadFromJsonAsync<IEnumerable<PersonalNotification>>();
            Notifications.AddRange(notifications);
            Notifications.Sort((n1, n2) => DateTime.Compare(n1.Date, n2.Date));
            await localStorage.SetItemAsync<long>(config["Notification:Date"], now.Ticks);
            await localStorage.SetItemAsync<IEnumerable<PersonalNotification>>(config["Notification:Values"], Notifications);
        }
        StateHasChanged();
    }

    private async Task GoTo(string link)
    {
        await js.InvokeVoidAsync("blazorModal", "#notificationModal", "hide");
        navManager.NavigateTo(link);
    }

    /// <summary>
    /// Delete request for notification on server.
    /// Delete notification from localStorage.
    /// </summary>
    /// <param name="id">Notification Id</param>
    /// <returns>async Task</returns>
    private async Task DeleteNotification(int id)
    {
        PersonalNotification notification = Notifications.FirstOrDefault(x => x.Id == id);
        if (notification != null)
        {
            if (await js.InvokeAsync<bool>("blazorConfirm", "Are you sure you want to delete this notification?"))
            {
                var response = await http.Client.DeleteAsync($"/api/notification/{id}");
                if (response.IsSuccessStatusCode)
                {
                    Notifications.Remove(notification);
                    await localStorage.SetItemAsync<IEnumerable<PersonalNotification>>(config["Notification:Values"], Notifications);
                }
            }
        }
    }
}