@using Microsoft.AspNetCore.SignalR.Client
@inject AuthHttp http
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IConfiguration config
@inject NavigationManager navManager
@inject IJSRuntime js

<button type="button" class="btn btn-outline-warning" title="View your notifications" data-toggle="modal" data-target="#notificationModal">
    <i class="mdi mdi-bell"></i> <span class="badge badge-warning">@Notifications.Count</span>
</button>
<div class="modal fade" id="notificationModal" tabindex="-1" role="dialog" aria-labelledby="notificationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="notificationModalLabel">Notifications</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <i class="mdi mdi-close"></i>
                </button>
            </div>
            <div class="modal-body">
                <div class="list-group">
                    @if (Notifications.Count == 0)
                    {
                        <p class="lead mx-auto">You have no notifications.</p>
                    }
                    else
                        foreach (PersonalNotification notification in Notifications)
                        {
                            <div class="list-group-item d-flex justify-content-between align-items-center">
                                @notification.Message
                                <div class="btn-group">
                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteNotification(notification.Id)"><i class="mdi mdi-delete"></i></button>
                                    <button class="btn btn-sm btn-outline-info" @onclick="() => GoTo(notification.Link)"><i class="mdi mdi-link"></i></button>
                                </div>
                            </div>
                        }
                </div>
            </div>
        </div>
    </div>
</div>

@code{
    @inject Microsoft.AspNetCore.Components.WebAssembly.Authentication.IAccessTokenProvider tokenProvider
    HubConnection hubConnection { get; set; }
    List<PersonalNotification> Notifications { get; set; } = new List<PersonalNotification>();

    /// <summary>
    /// Initializes NotificationDisplay
    /// </summary>
    /// <returns>async Task</returns>
    protected override async Task OnInitializedAsync()
    {
        await ConnectToHub();
        await GetNotifications();
        await base.OnInitializedAsync();
    }

    /// <summary>
    /// Gets localStorage notifications and last check date.
    /// A request to server is made based off of localStorage.
    /// New notifications are added to localStorage.
    /// </summary>
    /// <returns>async Task</returns>
    private async Task GetNotifications()
    {
        long? lastDate = null;
        if (await localStorage.ContainKeyAsync(config["Notification:Date"]))
        {
            lastDate = await localStorage.GetItemAsync<long>(config["Notification:Date"]);
            Notifications.AddRange(await localStorage.GetItemAsync<IEnumerable<PersonalNotification>>(config["Notification:Values"]));
        }
        Dictionary<string, string> query = new Dictionary<string, string>();
        if (lastDate.HasValue)
            query.Add("lastDate", lastDate.ToString());
        DateTime now = DateTime.Now;
        string path = Microsoft.AspNetCore.WebUtilities.QueryHelpers.AddQueryString("/api/notification", query);
        var response = await http.Client.GetAsync(path);
        if (response.IsSuccessStatusCode)
        {
            var notifications = await response.Content.ReadFromJsonAsync<IEnumerable<PersonalNotification>>();
            Notifications.AddRange(notifications);
            Notifications.Sort((n1, n2) => DateTime.Compare(n1.Date, n2.Date));
            await localStorage.SetItemAsync<long>(config["Notification:Date"], now.Ticks);
            await localStorage.SetItemAsync<IEnumerable<PersonalNotification>>(config["Notification:Values"], Notifications);
        }
        StateHasChanged();
    }

    /// <summary>
    /// Connects client to SignalR hub.
    /// </summary>
    /// <returns>async Task</returns>
    private async Task ConnectToHub()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(navManager.ToAbsoluteUri("/group-hub"), options =>
            {
                options.AccessTokenProvider = () => GetToken();
            })
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<PersonalNotification>("ReceiveNotification", notification =>
        {
            Notifications.Add(notification);
            StateHasChanged();
        });

        hubConnection.On<WagerHostBid, byte>("ReceiveWagerHostBid", async (hostBid, status) =>
        {
        //trigger sessionstorage.changed in components needing this
        await sessionStorage.SetItemAsync<WagerHostBid>("wagerHostBid", hostBid);
        });

        await hubConnection.StartAsync();
    }

    /// <summary>
    /// Closes notification modal and goes to a link.
    /// </summary>
    /// <param name="link">The link to go to.</param>
    /// <returns>async Task</returns>
    private async Task GoTo(string link)
    {
        await js.InvokeVoidAsync("blazorModal", "#notificationModal", "hide");
        navManager.NavigateTo(link);
    }

    /// <summary>
    /// Delete request for notification on server.
    /// Delete notification from localStorage.
    /// </summary>
    /// <param name="id">Notification Id</param>
    /// <returns>async Task</returns>
    private async Task DeleteNotification(int id)
    {
        PersonalNotification notification = Notifications.FirstOrDefault(x => x.Id == id);
        if (notification != null)
        {
            if (await js.InvokeAsync<bool>("blazorConfirm", "Are you sure you want to delete this notification?"))
            {
                var response = await http.Client.DeleteAsync($"/api/notification/{id}");
                if (response.IsSuccessStatusCode)
                {
                    Notifications.Remove(notification);
                    await localStorage.SetItemAsync<IEnumerable<PersonalNotification>>(config["Notification:Values"], Notifications);
                }
            }
        }
    }

    /// <summary>
    /// Gets the user's access token
    /// </summary>
    /// <returns>Access Token</returns>
    private async Task<string> GetToken()
    {
        try
        {
            var result = await tokenProvider.RequestAccessToken();
            if (result.TryGetToken(out Microsoft.AspNetCore.Components.WebAssembly.Authentication.AccessToken token))
                return token.Value;
        }
        catch { }
        return null;
    }
}