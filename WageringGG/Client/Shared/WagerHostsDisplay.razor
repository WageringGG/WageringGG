@inject AuthHttp http

<div class="card border-primary">
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-borderless text-center">
                <thead>
                    <tr>
                        <th scope="col">Name</th>
                        <th scope="col">Payable (%)</th>
                        <th scope="col">Receivable (%)</th>
                        <th scope="col">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (WagerHostBid host in Hosts)
                    {
                        <tr>
                            <td>
                                <a class="btn btn-outline-secondary btn-sm" href="@($"/user/{host.Profile.DisplayName}")" title="View profile">@host.Profile.DisplayName</a>
                            </td>
                            <td>@host.PayablePt%</td>
                            <td>@host.ReceivablePt%</td>
                            <td>
                                @if (host.ProfileId == UserId && host.Approved == null)
                                {
                                    <button class="btn btn-outline-danger btn-sm" title="Decline the wager." @onclick="() => DeclineWager(host.Id)"><i class="mdi mdi-cancel"></i></button>
                                    <button class="btn btn-outline-success btn-sm" title="Accept the wager." @onclick="() => AcceptWager(host.Id)"><i class="mdi mdi-check"></i></button>
                                }
                                else
                                {
                                    @if (host.Approved.HasValue)
                                    {
                                        @if (host.Approved.Value == false)
                                        {
                                            <button class="btn btn-outline-danger btn-sm disabled" title="@($"{host.Profile.DisplayName} declined the wager.")"><i class="mdi mdi-cancel"></i></button>
                                        }
                                        else
                                        {
                                            <button class="btn btn-outline-success btn-sm disabled" title="@($"{host.Profile.DisplayName} accepted the wager.")"><i class="mdi mdi-check"></i></button>
                                        }
                                    }
                                    else
                                    {
                                        <small class="text-muted">Pending...</small>
                                    }
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public HubConnection HubConnection { get; set; }
    [Parameter]
    public string GroupName { get; set; }
    [Parameter]
    public string UserId { get; set; }
    [Parameter]
    public IEnumerable<WagerHostBid> Hosts { get; set; }
    [Parameter]
    public EventCallback<Status> StatusCallback { get; set; }

    private async Task DeclineWager(int id)
    {
        //return date response too
        var response = await http.Client.PostAsJsonAsync<int>("/api/bid/wager/decline", id);
        if (response.IsSuccessStatusCode)
        {
            var data = await response.Content.ReadFromJsonAsync<byte>();
            var host = Hosts.FirstOrDefault(x => x.Id == id);
            if (host != null)
                host.Approved = false;
            await StatusCallback.InvokeAsync((Status)data);
            await HubConnection.InvokeAsync("SendWagerHostBid", GroupName, host, new WagerStatus { Status = data, WagerId = host.WagerId });
        }
    }

    private async Task AcceptWager(int id)
    {
        var response = await http.Client.PostAsJsonAsync<int>("/api/bid/wager/accept", id);
        if (response.IsSuccessStatusCode)
        {
            var data = await response.Content.ReadFromJsonAsync<byte>();
            var host = Hosts.FirstOrDefault(x => x.Id == id);
            if (host != null)
                host.Approved = true;
            await StatusCallback.InvokeAsync((Status)data);
            await HubConnection.InvokeAsync("SendWagerHostBid", GroupName, host, new WagerStatus { Status = data, WagerId = host.WagerId });
        }
    }
}
