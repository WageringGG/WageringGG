@inherits LayoutComponentBase
@inject NavigationManager navManager
@inject ISessionStorageService sessionStorage
@inject AuthHttp http
@inject Microsoft.AspNetCore.Components.WebAssembly.Authentication.IAccessTokenProvider tokenProvider

<NavMenu />
<main role="main" class="container">
    <CascadingValue TValue="HubConnection" Value="HubConnection">
        @Body
    </CascadingValue>
</main>
<BottomNav />

@code{
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }
    public HubConnection HubConnection { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var context = await AuthenticationState;
        if (context.User.Identity.IsAuthenticated)
        {
            await ConnectToHub();
        }
        await base.OnInitializedAsync();
    }

    /// <summary>
    /// Connects client to SignalR hub.
    /// Adds user to their SignalR groups.
    /// </summary>
    /// <returns>async Task</returns>
    private async Task ConnectToHub()
    {
        HubConnection = new HubConnectionBuilder()
            .WithUrl(navManager.ToAbsoluteUri("/group-hub"), options =>
            {
                options.AccessTokenProvider = async () => await GetToken();
            })
            .WithAutomaticReconnect()
            .Build();

        HubConnection.On<Notification>("ReceiveNotification", async notification =>
        {
            await sessionStorage.SetItemAsync<Notification>("Notification", notification);
        });

        HubConnection.On<string>("ReceiveGroup", async (groupName) =>
        {
            await HubConnection.InvokeAsync("AddToGroup", groupName);
        });

        HubConnection.On<WagerMember, IdStatus>("ReceiveWagerMember", async (member, status) =>
        {
            await sessionStorage.SetItemAsync<WagerMember>("WagerMember", member);
            await sessionStorage.SetItemAsync<IdStatus>("WagerStatus", status);
        });

        HubConnection.On<IdStatus>("ReceiveWagerStatus", async status =>
        {
            await sessionStorage.SetItemAsync<IdStatus>("WagerStatus", status);
        });

        await HubConnection.StartAsync();
    }

    /// <summary>
    /// Gets the user's access token
    /// </summary>
    /// <returns>Access Token</returns>
    private async Task<string> GetToken()
    {
        try
        {
            var result = await tokenProvider.RequestAccessToken();
            if (result.TryGetToken(out Microsoft.AspNetCore.Components.WebAssembly.Authentication.AccessToken token))
                return token.Value;
        }
        catch { }
        return null;
    }
}