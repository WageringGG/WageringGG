@inject IConfiguration config
@inject HttpClient http

<ErrorDisplay Errors="KeyErrors" />
@if (!string.IsNullOrEmpty(CurrentKey))
{
    <div class="form-group">
        <label>Current Public Key</label>
        <input type="text" disabled class="form-control" value="@CurrentKey" />
    </div>
}
@if (/*Transaction*/ null == null)
{
    <div class="form-group">
        <label>Public Key</label>
        <input type="text" @bind-value="PublicKey" class="form-control" />
    </div>
    <button type="button" class="btn btn-success" @onclick="GetChallenge">Submit</button>
}
else
{
    <div class="form-group">
        <label>Public Key</label>
        <input type="text" value="@PublicKey" disabled class="form-control" />
    </div>
    <div class="form-group">
        <label>Secret Seed</label>
        <input type="password" @bind-value="SecretSeed" class="form-control" />
    </div>
    <button type="button" class="btn btn-success" @onclick="SendTransaction">Submit</button>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; }
    private string CurrentKey { get; set; }
    private string PublicKey { get; set; }
    private string SecretSeed { get; set; }
    public ICollection<string> KeyErrors { get; set; } = new List<string>();

    protected override async Task OnParametersSetAsync()
    {
        var context = await AuthenticationState;
        if (context.User.Identity.IsAuthenticated)
        {
            CurrentKey = context.User.GetKey();
        }
        await base.OnParametersSetAsync();
    }

    /// <summary>
    /// SEP-0010 Implementation
    /// </summary>
    private async Task GetChallenge()
    {
        KeyErrors.Clear();
        if (string.IsNullOrWhiteSpace(PublicKey))
        {
            KeyErrors.Add("The Public Key is required.");
            return;
        }
        string response = await http.GetStringAsync($"/api/stellar?account={PublicKey}");
        //Transaction = Transaction.FromEnvelopeXdr(response);
        //Network network = new Network(config["Stellar:Network"]);
        //WebAuthentication.ReadChallengeTransaction(Transaction, config["Stellar:ServerKey"], network);
    }

    private async Task SendTransaction()
    {
        KeyErrors.Clear();
        if (string.IsNullOrWhiteSpace(SecretSeed))
        {
            KeyErrors.Add("The Secret Seed is required.");
            return;
        }
        // var signature = KeyPair.FromSecretSeed(SecretSeed);
        // Transaction.Sign(signature);
        var response = await http.PostAsJsonAsync("/api/stellar", ""); //Transaction.ToEnvelopeXdrBase64());
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            var token = await response.Content.ReadAsStringAsync();
        }
        else
        {
            KeyErrors.Union(await response.Content.ReadFromJsonAsync<IEnumerable<string>>());
        }
    }
}
