@inject IConfiguration config
@inject AuthHttp http
@inject IJSRuntime js

<ErrorDisplay Errors="KeyErrors" />
@if (ShowSuccess)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        You have successfully set a new public key.
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <i class="mdi mdi-close"></i>
        </button>
    </div>
}
@if (!string.IsNullOrEmpty(CurrentKey))
{
    <div class="form-group">
        <label>Current Public Key</label>
        <div class="input-group">
            <input type="text" disabled class="form-control" value="@CurrentKey" />
            <div class="input-group-append">
                <button type="button" class="btn btn-danger" @onclick="DeleteKey"><i class="mdi mdi-delete"></i></button>
            </div>
        </div>
    </div>
}
else if (Transaction == null)
{
    <div class="form-group">
        <label>Public Key</label>
        <input type="text" @bind-value="PublicKey" class="form-control" />
    </div>
    <button type="button" class="btn btn-success" @onclick="GetChallenge">Submit</button>
}
else
{
    <div class="form-group">
        <label>Public Key</label>
        <input type="text" value="@PublicKey" disabled class="form-control" />
    </div>
    <div class="form-group">
        <label>Secret Seed</label>
        <input type="password" @bind-value="SecretSeed" class="form-control" />
    </div>
    <button type="button" class="btn btn-success" @onclick="SendTransaction">Submit</button>
}

@code {
    @using System.Security.Claims
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; }
    ClaimsIdentity Claims { get; set; }
    private string CurrentKey { get; set; }
    private string PublicKey { get; set; }
    private string SecretSeed { get; set; }
    private string Transaction { get; set; }
    public IEnumerable<string> KeyErrors { get; set; } = new List<string>();
    private bool ShowSuccess { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var context = await AuthenticationState;
        if (context.User.Identity.IsAuthenticated)
        {
            Claims = (ClaimsIdentity)context.User.Identity;
            CurrentKey = context.User.GetKey();
        }
        await base.OnParametersSetAsync();
    }

    /// <summary>
    /// SEP-0010 Implementation
    /// </summary>
    private async Task GetChallenge()
    {
        if (string.IsNullOrWhiteSpace(PublicKey))
        {
            KeyErrors = new string[] { "The Public Key is required." };
            return;
        }
        var response = await http.Client.GetAsync($"/api/stellarauth?account={PublicKey}");
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            Transaction = await response.Content.ReadAsStringAsync();
            await js.InvokeVoidAsync("StellarSdk.Utils.readChallengeTx", Transaction, config["Stellar:ServerKey"], config["Stellar:Passphrase"]);
        }
        else
        {
            KeyErrors = await response.Content.ReadFromJsonAsync<IEnumerable<string>>();
        }
    }

    private async Task DeleteKey()
    {
        var response = await http.Client.DeleteAsync("/api/profile/publickey");
        if (response.IsSuccessStatusCode)
        {
            var claim = Claims.FindFirst(Constants.Claims.PublicKey);
            if (Claims.TryRemoveClaim(claim))
            {
                CurrentKey = null;
                ShowSuccess = false;
            }
        }
    }

    private async Task SendTransaction()
    {
        if (string.IsNullOrWhiteSpace(SecretSeed))
        {
            KeyErrors = new string[] { "The Secret Seed is required." };
            return;
        }
        string xdr = await js.InvokeAsync<string>("signTransaction", Transaction, SecretSeed, config["Stellar:Passphrase"]);
        var response = await http.Client.PostAsJsonAsync("/api/stellarauth", xdr);
        if (response.IsSuccessStatusCode)
        {
            Claims.AddClaim(new Claim(Constants.Claims.PublicKey, PublicKey));
            CurrentKey = PublicKey;
            PublicKey = null;
            Transaction = null;
            SecretSeed = null;
            ShowSuccess = true;
        }
        else
        {
            KeyErrors = await response.Content.ReadFromJsonAsync<IEnumerable<string>>();
        }
    }
}
