@page "/wagers/{name}"
@inject HttpClient http
@inject NavigationManager nav

<h1 class="text-center">@Game.Name Wagers</h1>
<div class="d-flex my-2">
    <AuthorizeView>
        <Authorized>
            <Create Context="context" Game="Game" />
        </Authorized>
        <NotAuthorized>
            <div class="alert alert-warning">Sign in to create a wager.</div>
        </NotAuthorized>
    </AuthorizeView>
</div>
@if (Wagers == null)
{
    <p class="lead">Loading...</p>
}
else
{
    @if (Wagers.TotalPages == 0 && Query.Count == 0)
    {
        <div class="text-center my-auto">
            <h3>There's currently no wagers.</h3>
            <p class="lead">Create your own to get started.</p>
        </div>
    }
    else
    {
        <div class="card border-primary my-2">
            <div class="card-header" role="button" id="searchCard">
                <a data-toggle="collapse" data-target="#searchCollapse" aria-expanded="false" aria-controls="searchCollapse">
                    <h5>
                        Search Wagers
                    </h5>
                </a>
            </div>
            <div id="searchCollapse" class="collapse" aria-labelledby="searchCard">
                <div class="card-body">
                    <div class="form-row">
                        <div class="form-group col-12 col-sm-6 col-md-3">
                            <label>Display Name:</label>
                            <input type="text" @bind-value="DisplayName" class="form-control" />
                        </div>
                        <div class="form-group col-12 col-sm-6 col-md-3">
                            <label>Player Count:</label>
                            <input type="number" @bind-value="PlayerCount" class="form-control" />
                        </div>
                        <div class="form-group col-12 col-sm-6 col-md-3">
                            <label>Minimum Wager:</label>
                            <input type="number" @bind-value="MinimumWager" class="form-control" />
                        </div>
                        <div class="form-group col-12 col-sm-6 col-md-3">
                            <label>Maximum Wager:</label>
                            <input type="number" @bind-value="MaximumWager" class="form-control" />
                        </div>
                    </div>
                </div>
                <div class="card-footer d-flex bg-transparent">
                    <button class="btn btn-danger ml-auto">Reset</button>
                    <button class="btn btn-success ml-2" @onclick="Search">Search</button>
                </div>
            </div>
        </div>
        @if (Wagers.TotalPages == 0)
        {
            <div class="text-center my-auto">
                <h3>There's currently no wagers with the specified parameters.</h3>
                <p class="lead">Create your own wager, or search for a different wager.</p>
            </div>
        }
        else
        {
            <div class="row">
                @foreach (Wager wager in Wagers.List)
                {
                    <div class="col-12 col-sm-6 col-lg-4 col-xl-3 my-2">
                        <WagerDisplay Wager="wager" Link="@($"/wagers/view/{wager.Id}")"></WagerDisplay>
                    </div>
                }
            </div>
            <nav aria-label="Pagination">
                <ul class="pagination">
                    <li class="page-item @(Wagers.PageIndex <= 1 ? "disabled" : string.Empty)">
                        <button class="page-link" @onclick="() => SetPage(Wagers.PageIndex - 1)" aria-label="Previous">
                            <i class="mdi mdi-chevron-left"></i>
                        </button>
                    </li>
                    @for (int i = 1; i <= Wagers.TotalPages; i++)
                    {
                        int copy = i;
                        <li class="page-item @(Page == i ? "active" : string.Empty)"><button class="page-link" @onclick="() => SetPage(copy)">@i</button></li>
                    }
                    <li class="page-item @(Wagers.PageIndex >= Wagers.TotalPages ? "disabled" : string.Empty)">
                        <button class="page-link" @onclick="() => SetPage(Wagers.PageIndex + 1)" aria-label="Next">
                            <i class="mdi mdi-chevron-right"></i>
                        </button>
                    </li>
                </ul>
            </nav>
        }
    }
}

@code {
    @using Microsoft.AspNetCore.WebUtilities
    [Parameter]
    public string Name { get; set; }
    private Game Game { get; set; }
    private Dictionary<string, string> Query { get; set; }
    private PaginatedList<Wager> Wagers { get; set; }
    private int? Page { get; set; } = 1;
    private string DisplayName { get; set; }
    private int? PlayerCount { get; set; }
    private int? MinimumWager { get; set; }
    private int? MaximumWager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Game = Constants.Games.Values.FirstOrDefault(x => x.NormalizedName == Name.ToLower());
        if (Game != null)
        {
            QueryParser queryParser = new QueryParser(nav);
            Query = new Dictionary<string, string>();
            if (queryParser.TryGetQueryString<int>("page", out int Page))
                Query.Add("page", Page.ToString());
            if (queryParser.TryGetQueryString<string>("displayName", out string DisplayName))
                Query.Add("displayName", DisplayName);
            if (queryParser.TryGetQueryString<int>("playerCount", out int PlayerCount))
                Query.Add("playerCount", PlayerCount.ToString());
            if (queryParser.TryGetQueryString<int>("minimumWager", out int MinimumWager))
                Query.Add("minimumWager", MinimumWager.ToString());
            if (queryParser.TryGetQueryString<int>("maximumWager", out int MaximumWager))
                Query.Add("maximumWager", MaximumWager.ToString());
            string path = QueryHelpers.AddQueryString($"/api/wager/{Game.Id}", Query);
            Wagers = await http.GetFromJsonAsync<PaginatedList<Wager>>(path);
        }
        await base.OnInitializedAsync();
    }

    private async Task SetPage(int i)
    {
        Page = i;
        await Search();
    }

    private async Task Search()
    {
        Query = new Dictionary<string, string>();
        if (Page.HasValue)
            Query.Add("page", Page.ToString());
        if (!string.IsNullOrEmpty(DisplayName))
            Query.Add("displayName", DisplayName);
        if (PlayerCount.HasValue)
            Query.Add("playerCount", PlayerCount.ToString());
        if (MinimumWager.HasValue)
            Query.Add("minimumWager", MinimumWager.ToString());
        if (MaximumWager.HasValue)
            Query.Add("maximumWager", MaximumWager.ToString());
        string path = QueryHelpers.AddQueryString($"/wagers/{Game.NormalizedName}", Query);
        nav.NavigateTo(path);
        path = QueryHelpers.AddQueryString($"/api/wager/{Game.Id}", Query);
        Wagers = await http.GetFromJsonAsync<PaginatedList<Wager>>(path);
    }
}
