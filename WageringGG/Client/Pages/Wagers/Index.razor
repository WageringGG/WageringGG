@page "/wagers/{name}"
@inject HttpClient http
@inject NavigationManager nav

<h1 class="text-center">@Game.Name Wagers</h1>
<Create Game="Game" />
@if (Wagers != null)
{
    @if (Wagers.TotalPages == 0)
    {
        <div class="text-center my-auto">
            <h3>There's currently no wagers.</h3>
            <p class="lead">Create your own to get started.</p>
        </div>
    }
    else
    {
        <div class="row">
            @foreach (Wager wager in Wagers.List)
            {
                <div class="col-12 col-md-6">
                    <WagerDisplay Wager="wager" Link="@($"/wagers/view/{wager.Id}")"></WagerDisplay>
                </div>
            }
        </div>
    }
}

@code {
    [Parameter]
    public string Name { get; set; }
    public Game Game { get; set; }
    public Dictionary<string, string> Query { get; set; } = new Dictionary<string, string>();
    public PaginatedList<Wager> Wagers { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        Game = Constants.Games.Values.FirstOrDefault(x => x.NormalizedName == Name);
        if (Game != null)
        {
            QueryParser queryParser = new QueryParser(nav);
            if (queryParser.TryGetQueryString<int>("page", out int page))
                Query.TryAdd("page", page.ToString());
            if (queryParser.TryGetQueryString<string>("displayName", out string displayName))
                Query.TryAdd("displayName", displayName);
            if (queryParser.TryGetQueryString<int>("playerCount", out int playerCount))
                Query.TryAdd("playerCount", playerCount.ToString());
            if (queryParser.TryGetQueryString<int>("minimumWager", out int minimumWager))
                Query.TryAdd("minimumWager", minimumWager.ToString());
            if (queryParser.TryGetQueryString<int>("maximumWager", out int maximumWager))
                Query.TryAdd("maximumWager", maximumWager.ToString());
            string path = Microsoft.AspNetCore.WebUtilities.QueryHelpers.AddQueryString($"/api/wager/{Game.Id}", Query);
            Wagers = await http.GetFromJsonAsync<PaginatedList<Wager>>(path);
        }
        await base.OnParametersSetAsync();
    }
}
