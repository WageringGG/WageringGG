@inject AuthHttp http
@inject NavigationManager navManager
@inject IJSRuntime js

<div class="d-flex">
    <button class="btn btn-outline-secondary ml-auto" data-toggle="modal" data-target="#applyModal">
        <i class="mdi mdi-plus"></i> Apply
    </button>
</div>
<div class="modal fade" id="applyModal" tabindex="-1" role="dialog" aria-labelledby="modalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalLabel">Apply to this wager</h5>
                <button type="button" class="close text-danger" data-dismiss="modal" aria-label="Close">
                    <i class="mdi mdi-close"></i>
                </button>
            </div>
            <EditForm EditContext="EditContext" OnValidSubmit="SubmitChallenge" OnInvalidSubmit="SetErrors">
                <div class="modal-body">
                    <DataAnnotationsValidator />
                    @if (!HasKey)
                    {
                        <div class="alert alert-danger" role="alert">
                            You do not have a Stellar public key set. Go to <a @onclick="GoToProfile" role="button" class="alert-link">your profile management page</a> to set one.
                        </div>
                    }
                    <ErrorDisplay @bind-Errors="Errors" />
                    <div class="table-responsive">
                        <table class="table table-borderless text-center">
                            <thead>
                                <tr>
                                    <th scope="col">Name</th>
                                    <th scope="col">Payable (%)</th>
                                    <th scope="col">Receivable (%)</th>
                                    <th scope="col">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (WagerChallengeBid bid in Challenge.Challengers)
                                {
                                    <tr>
                                        <td>@bid.DisplayName</td>
                                        @if (bid.IsEditing)
                                        {
                                            <td>
                                                <input type="number" @bind-value="bid.PayablePt" class="form-control" />
                                            </td>
                                            <td>
                                                <input type="number" @bind-value="bid.ReceivablePt" class="form-control" />
                                            </td>
                                        }
                                        else
                                        {
                                            <td>@bid.PayablePt%</td>
                                            <td>@bid.ReceivablePt%</td>
                                        }
                                        <td>
                                            <div class="btn-group">
                                                @if (bid.IsEditing)
                                                {
                                                    <button type="button" class="btn btn-link"><i class="mdi mdi-content-save" @onclick="e => SaveEdit(bid)"></i></button>
                                                }
                                                else
                                                {
                                                    <button type="button" class="btn btn-link"><i class="mdi mdi-pencil" @onclick="e => EditUser(bid)"></i></button>
                                                }
                                                @if (bid.ProfileId != Context.User.GetId())
                                                {
                                                    <button type="button" class="btn btn-link" @onclick="e => RemoveUser(bid.ProfileId)"><i class="mdi mdi-delete"></i></button>
                                                }
                                            </div>
                                        </td>
                                    </tr>
                                }
                                <tr class="border-top">
                                    <th scope="row">Total:</th>
                                    <td>@Challenge.Challengers.Sum(x => x.PayablePt)%</td>
                                    <td>@Challenge.Challengers.Sum(x => x.ReceivablePt)%</td>
                                    <td><button type="button" class="btn btn-sm btn-outline-secondary" @onclick="Normalize">Normalize</button></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <div class="row">
                        <div class="form-group col-6 ml-auto">
                            <label for="amount">Amount</label>
                            <input type="number" class="form-control" id="amount" @bind-value="Challenge.Amount">
                        </div>
                    </div>
                    <button type="button" class="btn btn-sm btn-outline-primary btn-block" data-toggle="collapse" data-target="#addCollapse" aria-expanded="false" aria-controls="addCollapse">
                        <i class="mdi mdi-account-plus"></i> Add User
                    </button>
                    <div class="collapse" id="addCollapse">
                        <div class="form-row my-2">
                            <div class="col-12 col-sm-6">
                                <div class="form-group">
                                    <label for="displayName">Display Name</label>
                                    <input type="text" autocomplete="off" @bind-value="DisplayName" class="form-control" id="displayName" @bind-value:event="oninput" @onkeyup="BeginTimer" />
                                </div>
                                @if (Profiles.Count > 0)
                                {
                                    <div class="card overflow-auto" style="max-height: 6rem;">
                                        <div class="btn-group-vertical w-100">
                                            @foreach (Profile profile in Profiles)
                                            {
                                                <button type="button" class="btn btn-block btn-sm @(profile.IsSelected ? "btn-outline-success" : "btn-outline-secondary")" @onclick="e => SelectUser(profile)">@profile.DisplayName</button>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                            <div class="col-12 col-sm-6">
                                <div class="form-group">
                                    <label for="payablePt">Payable %</label>
                                    <input type="number" @bind-value="Challenger.PayablePt" class="form-control" id="payablePt" />
                                </div>
                                <div class="form-group">
                                    <label for="receivablePt">Receivable %</label>
                                    <input type="number" @bind-value="Challenger.ReceivablePt" class="form-control" id="receivablePt" />
                                </div>
                            </div>
                        </div>
                        <button type="button" class="btn btn-danger" @onclick="ResetUser">Reset</button>
                        <button type="button" class="btn btn-success" @onclick="AddUser">Confirm</button>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-success">Submit</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    @using System.Timers;
    [Parameter]
    public AuthenticationState Context { get; set; }
    [Parameter]
    public int WagerId { get; set; }
    private WagerChallenge Challenge { get; set; } = new WagerChallenge();
    private WagerChallengeBid Challenger { get; set; } = new WagerChallengeBid();
    private IEnumerable<string> Errors { get; set; }
    private Timer Debounce { get; set; } = new Timer(750) { AutoReset = false };
    private ICollection<Profile> Profiles { get; set; } = new List<Profile>();
    private EditContext EditContext { get; set; }
    private string DisplayName { get; set; }
    private bool HasKey { get; set; } = false;
    private Profile SelectedProfile
    {
        get
        {
            return Profiles.FirstOrDefault(x => x.IsSelected);
        }
    }

    protected override void OnInitialized()
    {
        EditContext = new EditContext(Challenge);
        Debounce.Elapsed += SearchUsers;
        if (Context.User.Identity.IsAuthenticated)
        {
            if (!string.IsNullOrEmpty(Context.User.GetKey()))
                HasKey = true;
            Challenge.Challengers.Add(new WagerChallengeBid
            {
                ProfileId = Context.User.GetId(),
                DisplayName = Context.User.GetName(),
                ReceivablePt = 100,
                PayablePt = 100
            });
        }
        base.OnInitialized();
    }

    private async Task AddUser()
    {
        Profile profile = SelectedProfile;
        if (profile == null)
        {
            await js.InvokeVoidAsync("alert", "No user has been selected.");
            return;
        }
        if (Challenge.Challengers.Any(x => x.DisplayName == profile.DisplayName))
        {
            await js.InvokeVoidAsync("alert", $"{profile.DisplayName} is already a member.");
            return;
        }

        Challenge.Challengers.Add(new WagerChallengeBid
        {
            ProfileId = profile.Id,
            DisplayName = profile.DisplayName,
            ReceivablePt = Challenger.ReceivablePt,
            PayablePt = Challenger.PayablePt
        });
        ResetUser();
        await js.InvokeVoidAsync("blazorCollapse", "#addCollapse", "hide");
    }

    private void SetErrors()
    {
        Errors = EditContext.GetValidationMessages();
    }

    private void ResetUser()
    {
        Challenger = new WagerChallengeBid();
        Profiles = new List<Profile>();
        DisplayName = null;
    }

    private void RemoveUser(string profileId)
    {
        WagerChallengeBid bid = Challenge.Challengers.FirstOrDefault(x => x.ProfileId == profileId);
        if (bid == null)
            return;
        Challenge.Challengers.Remove(bid);
    }

    private void EditUser(WagerChallengeBid bid)
    {
        if (bid == null)
            return;
        bid.IsEditing = true;
    }

    private void SaveEdit(WagerChallengeBid bid)
    {
        if (bid == null)
            return;
        bid.IsEditing = false;
    }

    private void Normalize()
    {
        byte avg = (byte)(100 / Challenge.Challengers.Count);
        Challenge.Challengers.All(x =>
        {
            x.PayablePt = avg;
            x.ReceivablePt = avg;
            return true;
        });
    }

    private void BeginTimer(KeyboardEventArgs e)
    {
        Debounce.Stop();
        Debounce.Start();
    }

    private void SelectUser(Profile profile)
    {
        profile.IsSelected = true;
        DisplayName = profile.DisplayName;
    }

    private async Task GoToProfile()
    {
        await js.InvokeVoidAsync("blazorModal", "#applyModal", "hide");
        navManager.NavigateTo("/profile");
    }

    private async void SearchUsers(object source, ElapsedEventArgs e)
    {
        if (string.IsNullOrEmpty(DisplayName))
            Profiles = new List<Profile>();
        else
            Profiles = await http.Client.GetFromJsonAsync<ICollection<Profile>>("/api/user/search/" + DisplayName);
        StateHasChanged();
    }

    private async Task SubmitChallenge()
    {
        if (!HasKey)
            return;
        HttpResponseMessage response = await http.Client.PostAsJsonAsync($"/api/wager/challenge/{WagerId}", Challenge);
        if (response.IsSuccessStatusCode)
        {
            Challenge.Id = await response.Content.ReadFromJsonAsync<int>();
            string link = $"/client/wagers/view/{WagerId}";
            await js.InvokeVoidAsync("blazorModal", "#applyModal", "hide");
            navManager.NavigateTo(link);
        }
        else
        {
            Errors = await response.Content.ReadFromJsonAsync<IEnumerable<string>>();
        }
    }
}
