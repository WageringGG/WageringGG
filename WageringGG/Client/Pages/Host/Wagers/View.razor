@page "/host/wagers/view/{id:int}"
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@inject AuthHttp http
@inject ISessionStorageService sessionStorage
@implements IDisposable

<ErrorDisplay @bind-Errors="Errors" />
@if (Wager != null)
{
    <h1 class="text-center">@Enum.GetName(typeof(Status), Wager.Status) Wager</h1>
    <div class="row">
        <div class="col-12 col-lg-8 mx-auto my-1 text-right">
            @if (Wager.Status == (byte)Status.Confirmed)
            {
                <button class="btn btn-outline-danger" @onclick="() => ChangeStatus(Status.Closed)">Close</button>
            }
            else if (Wager.Status == (byte)Status.Closed)
            {
                <button class="btn btn-outline-success ml-auto" @onclick="() => ChangeStatus(Status.Confirmed)">Open</button>
            }
            else if (Wager.Status == (byte)Status.Canceled)
            {
                if (IsDeleted)
                {
                    <div class="alert alert-warning" role="alert">This wager has been deleted.</div>
                }
                else
                {
                    <button class="btn btn-outline-danger ml-auto" @onclick="Delete">Delete</button>
                }
            }
        </div>
        <div class="col-12 col-lg-8 mx-auto my-1">
            <h3>Wager:</h3>
            <WagerDisplay Wager="Wager" />
        </div>
        <div class="col-12 col-lg-8 mx-auto my-1">
            <h3>Hosts:</h3>
            <AuthorizeView>
                <Authorized>
                    <WagerBidsDisplay Bids="Wager.Hosts">
                        @{
                            WagerHostBid host = Wager.Hosts.FirstOrDefault(x => x.ProfileId == context.User.GetId());
                        }
                        @if (host != null && !host.Approved.HasValue)
                        {
                            <div class="text-right">
                                <button class="btn btn-danger" title="Decline the wager." @onclick="() => Decline(host.Id)">Decline</button>
                                <button class="btn btn-success" title="Accept the wager." @onclick="() => Accept(host.Id)">Accept</button>
                            </div>
                        }
                    </WagerBidsDisplay>
                </Authorized>
            </AuthorizeView>
        </div>
        @if (Wager.Status != (byte)Status.Pending)
        {
            <div class="col-12 col-lg-8 mx-auto my-1">
                <h3>Challenges:</h3>
                @if (Wager.ChallengeCount == 0)
                {
                    <p class="text-center lead">There are currently no challenges.</p>
                }
                else
                {
                    <div class="row">
                        @foreach (WagerChallenge challenge in Wager.Challenges)
                        {
                            <div class="col-6 col-md-4 col-lg-3 col-xl-2">
                                <WagerChallengeDisplay Challenge="challenge">
                                    <!--ACCEPT/DECLINE BUTTONS-->
                                </WagerChallengeDisplay>
                            </div>
                        }
                    </div>
                }
            </div>
        }
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }
    [CascadingParameter]
    public HubConnection HubConnection { get; set; }
    private Wager Wager { get; set; }
    private bool IsDeleted { get; set; }
    private IEnumerable<string> Errors { get; set; } = new List<string>();

    protected override async Task OnParametersSetAsync()
    {
        sessionStorage.Changed += SessionStorageChanged;
        var response = await http.Client.GetAsync($"/api/host/wager/{Id}");
        if (response.IsSuccessStatusCode)
        {
            Wager = await response.Content.ReadFromJsonAsync<Wager>();
            await HubConnection.InvokeAsync("AddToGroup", Wager.GroupName);
        }
        else
            Errors = await response.Content.ReadFromJsonAsync<IEnumerable<string>>();
        await base.OnParametersSetAsync();
    }

    async void IDisposable.Dispose()
    {
        if (Wager != null)
            await HubConnection.InvokeAsync("RemoveFromGroup", Wager.GroupName);
    }

    private async Task ChangeStatus(Status status)
    {
        var response = await http.Client.PutAsJsonAsync($"/api/wager/status/{Wager.Id}", (byte)status);
        if (response.IsSuccessStatusCode)
        {
            Wager.Status = (byte)status;
            await HubConnection.SendAsync("SendWagerStatus", Wager.GroupName, new IdStatus { Status = Wager.Status, Id = Wager.Id });
            StateHasChanged();
        }
        else
            Errors = await response.Content.ReadFromJsonAsync<IEnumerable<string>>();
    }

    private void SessionStorageChanged(object sender, Blazored.SessionStorage.ChangedEventArgs e)
    {
        if (e.Key == "WagerStatus")
        {
            var data = (IdStatus)e.NewValue;
            if (Wager.Id == data.Id)
            {
                Wager.Status = data.Status;
                StateHasChanged();
            }
        }
        else if (e.Key == "WagerHostBid")
        {
            var data = (WagerHostBid)e.NewValue;
            if (Wager.Id == data.WagerId)
            {
                var index = Wager.Hosts.FindIndex(x => x.Id == data.Id);
                if (index > -1)
                {
                    Wager.Hosts[index] = data;
                    StateHasChanged();
                }
            }
        }
    }

    private async Task Delete()
    {
        IsDeleted = true;
        var response = await http.Client.DeleteAsync($"/api/wager/delete/{Id}");
        if (!response.IsSuccessStatusCode)
            IsDeleted = false;
    }

    private async Task Decline(int id)
    {
        //return date response too
        var response = await http.Client.PutAsync($"/api/bid/wager/decline/{id}", null);
        if (response.IsSuccessStatusCode)
        {
            var data = await response.Content.ReadFromJsonAsync<byte>();
            var host = Wager.Hosts.FirstOrDefault(x => x.Id == id);
            if (host != null)
                host.Approved = false;
            Wager.Status = data;
            await HubConnection.InvokeAsync("SendWagerHostBid", Wager.GroupName, host, new IdStatus { Status = data, Id = host.WagerId });
        }
    }

    private async Task Accept(int id)
    {
        var response = await http.Client.PutAsync($"/api/bid/wager/accept/{id}", null);
        if (response.IsSuccessStatusCode)
        {
            var data = await response.Content.ReadFromJsonAsync<byte>();
            var host = Wager.Hosts.FirstOrDefault(x => x.Id == id);
            if (host != null)
                host.Approved = true;
            Wager.Status = data;
            await HubConnection.InvokeAsync("SendWagerHostBid", Wager.GroupName, host, new IdStatus { Status = data, Id = host.WagerId });
        }
    }
}
