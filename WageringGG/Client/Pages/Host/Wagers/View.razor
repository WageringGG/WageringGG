@page "/host/wagers/view/{id:int}"
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@inject AuthHttp http
@inject ISessionStorageService sessionStorage

<ErrorDisplay @bind-Errors="Errors" />
<h1 class="text-center">@Enum.GetName(typeof(Status), Wager.Status) Wager</h1>
<div class="row">
    <div class="col-12 col-lg-8 mx-auto my-1 text-right">
        @if (Wager.Status == (byte)Status.Confirmed)
        {
            <button class="btn btn-outline-danger" @onclick="() => ChangeStatus(Status.Closed)">Close</button>
        }
        else if (Wager.Status == (byte)Status.Closed)
        {
            <button class="btn btn-outline-success ml-auto" @onclick="() => ChangeStatus(Status.Confirmed)">Open</button>
        }
    </div>
    <div class="col-12 col-lg-8 mx-auto my-1">
        <h3>Hosts:</h3>
        <AuthorizeView>
            <Authorized>
                <WagerHostsDisplay Hosts="Wager.Hosts" GroupName="@Wager.GroupName" UserId="@context.User.GetId()" StatusCallback="SetStatus" />
            </Authorized>
        </AuthorizeView>
    </div>
    <div class="col-12 col-lg-8 mx-auto my-1">
        <h3>Wager:</h3>
        <WagerDisplay Wager="Wager" />
    </div>
    @if (Wager.Status == (byte)Status.Confirmed)
    {
        <div class="col-12 col-lg-8 mx-auto my-1">
            <h3>Challenges:</h3>
            <div class="row">
                @foreach (WagerChallenge challenge in Wager.Challenges)
                {
                    <div class="col-6 col-md-4 col-lg-3 col-xl-2">
                        <WagerChallengeDisplay Challenge="challenge" IsHostView="true"></WagerChallengeDisplay>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    [CascadingParameter]
    public HubConnection HubConnection { get; set; }
    public Wager Wager { get; set; } = new Wager();
    public IEnumerable<string> Errors { get; set; } = new List<string>();

    protected override async Task OnParametersSetAsync()
    {
        sessionStorage.Changed += SessionStorageChanged;
        var response = await http.Client.GetAsync($"/api/host/wager/{Id}");
        if (response.IsSuccessStatusCode)
            Wager = await response.Content.ReadFromJsonAsync<Wager>();
        else
            Errors = await response.Content.ReadFromJsonAsync<IEnumerable<string>>();
        await base.OnParametersSetAsync();
    }

    private async Task ChangeStatus(Status status)
    {
        var response = await http.Client.PutAsJsonAsync($"/api/wager/status/{Wager.Id}", (byte)status);
        if (response.IsSuccessStatusCode)
        {
            Wager.Status = (byte)status;
            await HubConnection.SendAsync("SendWagerStatus", Wager.GroupName, new WagerStatus { Status = Wager.Status, WagerId = Wager.Id });
            StateHasChanged();
        }
        else
            Errors = await response.Content.ReadFromJsonAsync<IEnumerable<string>>();
    }

    private void SessionStorageChanged(object sender, Blazored.SessionStorage.ChangedEventArgs e)
    {
        if (e.Key == "WagerStatus")
        {
            var data = (WagerStatus)e.NewValue;
            if (Wager.Id == data.WagerId)
            {
                Wager.Status = data.Status;
                StateHasChanged();
            }
        }
        else if (e.Key == "WagerHostBid")
        {
            var data = (WagerHostBid)e.NewValue;
            if (Wager.Id == data.WagerId)
            {
                var index = Wager.Hosts.FindIndex(x => x.Id == data.Id);
                if (index  > -1)
                {
                    Wager.Hosts[index] = data;
                    StateHasChanged();
                }
            }
        }
    }

    private void SetStatus(Status status)
    {
        Wager.Status = (byte)status;
    }
}
