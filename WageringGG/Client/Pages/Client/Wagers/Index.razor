@page "/client/wagers"
@inject AuthHttp http
@inject ISessionStorageService sessionStorage
@attribute [Authorize]

<div class="row my-2">
    <div class="col-12 col-sm-4 my-2">
        <div class="list-group" role="tablist">
            @foreach (string status in Enum.GetNames(typeof(Status)))
            {
                <a class="list-group-item list-group-item-action d-flex align-items-center" data-toggle="list" href="#@status.ToLower()" role="tab">
                    @status <span class="badge badge-info ml-auto">@(Data?.Count(x => x.Status == Enum.Parse<Status>(status)))</span>
                </a>
            }
        </div>
    </div>
    <div class="col-12 col-sm-8">
        <div class="tab-content">
            @if (Data != null)
                @foreach (string status in Enum.GetNames(typeof(Status)))
                {
                    <div class="tab-pane" role="tabpanel" id="@status.ToLower()">
                        @{
                            IEnumerable<WagerChallenge> View = Data.Where(x => x.Status == Enum.Parse<Status>(status));
                        }
                        @if (View != null)
                        {
                            @if (View.Count() == 0)
                            {
                                <p class="text-center my-2 lead">
                                    There's currently no @status.ToLower() wager challenges.
                                </p>
                            }
                            else
                            {
                                <div class="row">
                                    @foreach (WagerChallenge challenge in Data)
                                    {
                                        <div class="col-12 my-2">
                                            <WagerDisplay Wager="challenge.Wager" Link="@($"/client/wagers/view/{challenge.Id}")" />
                                        </div>
                                    }
                                </div>
                            }
                        }
                    </div>
                }
        </div>
    </div>
</div>

@code{
    private IEnumerable<WagerChallenge> Data { get; set; }
    protected override async Task OnInitializedAsync()
    {
        sessionStorage.Changed += SessionStorageChanged;
        Data = await http.Client.GetFromJsonAsync<IEnumerable<WagerChallenge>>("/api/client/wagers");
        if (Data != null)
            Data = Data.OrderByDescending(x => x.Date);
        await base.OnInitializedAsync();
    }

    private void SessionStorageChanged(object sender, Blazored.SessionStorage.ChangedEventArgs e)
    {
        if (e.Key == "WagerStatus")
        {
            var data = (IdStatus)e.NewValue;
            var wager = Data.FirstOrDefault(x => x.Id == data.Id);
            if (wager != null)
            {
                wager.Status = data.Status;
                StateHasChanged();
            }
        }
    }
}