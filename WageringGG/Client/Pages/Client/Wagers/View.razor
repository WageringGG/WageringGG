@page "/client/wagers/view/{id:int}"
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@inject AuthHttp http
@inject ISessionStorageService sessionStorage

<ErrorDisplay @bind-Errors="Errors" />
@if (Challenge != null)
{
    <h1 class="text-center">@Enum.GetName(typeof(Status), Challenge.Status) Wager Challenge</h1>
    <div class="col-12 col-lg-8 mx-auto my-1">
        <h3>Wager:</h3>
        <WagerDisplay Wager="Challenge.Wager" />
    </div>
    <div class="row">
        <div class="col-12 col-lg-8 mx-auto my-1">
            <h3>Hosts:</h3>
            <AuthorizeView>
                <Authorized>
                    <WagerBidsDisplay Hosts="Challenge.Challengers">
                        @{
                            WagerChallengeBid bid = Challenge.Challengers.FirstOrDefault(x => x.ProfileId == context.User.GetId());
                        }
                        @if (bid != null && !bid.Approved.HasValue)
                        {
                            <div class="text-right">
                                <button class="btn btn-danger" title="Decline the wager." @onclick="() => DeclineBid(bid.Id)">Decline</button>
                                <button class="btn btn-success" title="Accept the wager." @onclick="() => AcceptBid(bid.Id)">Accept</button>
                            </div>
                        }
                    </WagerBidsDisplay>
                </Authorized>
            </AuthorizeView>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }
    [CascadingParameter]
    public HubConnection HubConnection { get; set; }
    public WagerChallenge Challenge { get; set; }
    public IEnumerable<string> Errors { get; set; } = new List<string>();

    protected override async Task OnParametersSetAsync()
    {
        sessionStorage.Changed += SessionStorageChanged;
        var response = await http.Client.GetAsync($"/api/client/wager/{Id}");
        if (response.IsSuccessStatusCode)
            Challenge = await response.Content.ReadFromJsonAsync<WagerChallenge>();
        else
            Errors = await response.Content.ReadFromJsonAsync<IEnumerable<string>>();
        await base.OnParametersSetAsync();
    }

    private void SessionStorageChanged(object sender, Blazored.SessionStorage.ChangedEventArgs e)
    {
        if (e.Key == "WagerChallengeStatus")
        {
            var data = (IdStatus)e.NewValue;
            if (Challenge.Id == data.Id)
            {
                Challenge.Status = data.Status;
                StateHasChanged();
            }
        }
        else if (e.Key == "WagerChallengeBid")
        {
            var data = (WagerChallengeBid)e.NewValue;
            if (Challenge.Id == data.ChallengeId)
            {
                var index = Challenge.Challengers.FindIndex(x => x.Id == data.Id);
                if (index > -1)
                {
                    Challenge.Challengers[index] = data;
                    StateHasChanged();
                }
            }
        }
    }

    private async Task DeclineBid(int id)
    {
        //return date response too
        var response = await http.Client.PostAsJsonAsync<int>("/api/bid/wager/decline", id);
        if (response.IsSuccessStatusCode)
        {
            var data = await response.Content.ReadFromJsonAsync<byte>();
            var host = Challenge.Challengers.FirstOrDefault(x => x.Id == id);
            if (host != null)
                host.Approved = false;
            Challenge.Status = data;
            await HubConnection.InvokeAsync("SendWagerChallengeBid", Challenge.GroupName, host, new IdStatus { Status = data, Id = Challenge.Id });
        }
    }

    private async Task AcceptBid(int id)
    {
        var response = await http.Client.PostAsJsonAsync<int>("/api/bid/wager/accept", id);
        if (response.IsSuccessStatusCode)
        {
            var data = await response.Content.ReadFromJsonAsync<byte>();
            var host = Challenge.Challengers.FirstOrDefault(x => x.Id == id);
            if (host != null)
                host.Approved = true;
            Challenge.Status = data;
            await HubConnection.InvokeAsync("SendWagerHostBid", Challenge.GroupName, host, new IdStatus { Status = data, Id = host.WagerId });
        }
    }
}
