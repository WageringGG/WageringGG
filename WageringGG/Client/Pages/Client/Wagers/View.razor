@page "/client/wagers/view/{id:int}"
@attribute [Authorize]
@inject AuthHttp http
@inject ISessionStorageService sessionStorage

<ErrorDisplay @bind-Errors="Errors" />
@if (Challenge != null)
{
    <div class="row">
        <div class="col-12 col-md-3 ml-auto">
            <p class="lead">Challenge Status <span class="badge badge-pill badge-secondary">@Enum.GetName(typeof(Status), Challenge.Status)</span></p>
        </div>
        <div class="col-12 col-md-5 mr-auto my-1 text-right">
            @if (Challenge.Wager.Status != Status.Canceled)
            {
                <ManageEntryDisplay @bind-Member="Member" Amount="Member.EntryAmount(Challenge.Wager.Amount)" />
            }
        </div>
    </div>
    <p class="lead">Wager Status <span class="badge badge-pill badge-secondary">@Enum.GetName(typeof(Status), Challenge.Wager.Status)</span></p>
    <div class="row">
        <div class="col-12 col-lg-8 mx-auto my-1">
            <h3>Wager:</h3>
            <WagerDisplay Wager="Challenge.Wager" />
        </div>
        <div class="col-12 col-lg-8 mx-auto my-1">
            <h3>Challengers:</h3>
            <AuthorizeView>
                <Authorized>
                    <WagerMembersDisplay Members="Challenge.Challengers">
                        @if (Member != null && !Member.IsApproved.HasValue)
                        {
                            <button class="btn btn-danger" title="Decline the wager challenge." @onclick="() => SetAnswer(false)">Decline</button>
                            <button class="btn btn-success" title="Accept the wager challenge." @onclick="() => SetAnswer(true)">Accept</button>
                        }
                    </WagerMembersDisplay>
                </Authorized>
            </AuthorizeView>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }
    [CascadingParameter]
    public HubConnection HubConnection { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; }
    private WagerChallenger Member { get; set; }
    private WagerChallenge Challenge { get; set; }
    public IEnumerable<string> Errors { get; set; } = new List<string>();

    protected override async Task OnParametersSetAsync()
    {
        sessionStorage.Changed += SessionStorageChanged;
        var response = await http.Client.GetAsync($"/api/client/wager/{Id}");
        AuthenticationState context = await AuthenticationState;
        if (response.IsSuccessStatusCode)
        {
            Challenge = await response.Content.ReadFromJsonAsync<WagerChallenge>();
            Member = Challenge.Members.FirstOrDefault(x => x.ProfileId == context.User.GetId());
        }
        else
            Errors = await response.Content.ReadFromJsonAsync<IEnumerable<string>>();
        await base.OnParametersSetAsync();
    }

    private void SessionStorageChanged(object sender, Blazored.SessionStorage.ChangedEventArgs e)
    {
        if (e.Key == "WagerChallengeStatus")
        {
            var data = (IdStatus)e.NewValue;
            if (Challenge.Id == data.Id)
            {
                Challenge.Status = data.Status;
                StateHasChanged();
            }
        }
        else if (e.Key == "WagerMember")
        {
            var data = (WagerMember)e.NewValue;
            if (Challenge.Id == data.ChallengeId)
            {
                var index = Challenge.Members.FindIndex(x => x.Id == data.Id);
                if (index > -1)
                {
                    Challenge.Members[index] = data;
                    StateHasChanged();
                }
            }
        }
    }

    private async Task SetAnswer(bool answer)
    {
        //return date response too
        var response = await http.Client.PutAsJsonAsync<bool>($"/api/bid/wager_challenge/{Member.Id}", answer);
        if (response.IsSuccessStatusCode)
        {
            Challenge.Status = await response.Content.ReadFromJsonAsync<Status>();
            Member.IsApproved = answer;
            await HubConnection.InvokeAsync("SendWagerChallengeStatus", WagerChallenge.Group(Challenge.Id), Member, new IdStatus { Status = Challenge.Status, Id = Challenge.WagerId });
        }
    }
}
