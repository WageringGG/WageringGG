@page "/client/wagers/view/{id:int}"
@attribute [Authorize]
@inject AuthHttp http
@inject ISessionStorageService sessionStorage

<ErrorDisplay @bind-Errors="Errors" />
@if (Challenge != null)
{
    <h1 class="text-center">@Enum.GetName(typeof(Status), Challenge.Status) Wager Challenge</h1>
    <div class="row">
        <div class="col-12 col-lg-8 mx-auto my-1">
            <h3>Wager:</h3>
            <WagerDisplay Wager="Challenge.Wager" />
        </div>
        <div class="col-12 col-lg-8 mx-auto my-1">
            <h3>Challengers:</h3>
            <AuthorizeView>
                <Authorized>
                    <WagerMembersDisplay Members="Challenge.Members">
                        @{
                            WagerMember member = Challenge.Members.FirstOrDefault(x => x.ProfileId == context.User.GetId());
                        }
                        @if (member != null && !member.IsApproved.HasValue)
                        {
                            <div class="form-group">
                                <label>Secret Seed:</label>
                                <input type="text" class="form-control" @bind-value="SecretSeed" />
                            </div>
                            <div class="text-right">
                                <button class="btn btn-danger" title="Decline the wager challenge." @onclick="() => DeclineBid(member.Id)">Decline</button>
                                <button class="btn btn-success" title="Accept the wager challenge." @onclick="() => AcceptBid(member.Id)">Accept</button>
                            </div>
                        }
                    </WagerMembersDisplay>
                </Authorized>
            </AuthorizeView>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }
    [CascadingParameter]
    public HubConnection HubConnection { get; set; }
    private WagerChallenge Challenge { get; set; }
    private string SecretSeed { get; set; }
    public IEnumerable<string> Errors { get; set; } = new List<string>();

    protected override async Task OnParametersSetAsync()
    {
        sessionStorage.Changed += SessionStorageChanged;
        var response = await http.Client.GetAsync($"/api/client/wager/{Id}");
        if (response.IsSuccessStatusCode)
            Challenge = await response.Content.ReadFromJsonAsync<WagerChallenge>();
        else
            Errors = await response.Content.ReadFromJsonAsync<IEnumerable<string>>();
        await base.OnParametersSetAsync();
    }

    private void SessionStorageChanged(object sender, Blazored.SessionStorage.ChangedEventArgs e)
    {
        if (e.Key == "WagerChallengeStatus")
        {
            var data = (IdStatus)e.NewValue;
            if (Challenge.Id == data.Id)
            {
                Challenge.Status = data.Status;
                StateHasChanged();
            }
        }
        else if (e.Key == "WagerMember")
        {
            var data = (WagerMember)e.NewValue;
            if (Challenge.Id == data.ChallengeId)
            {
                var index = Challenge.Members.FindIndex(x => x.Id == data.Id);
                if (index > -1)
                {
                    Challenge.Members[index] = data;
                    StateHasChanged();
                }
            }
        }
    }

    private async Task DeclineBid(int id)
    {
        //return date response too
        var response = await http.Client.PutAsync($"/api/bid/wager/challenge/decline/{id}", null);
        if (response.IsSuccessStatusCode)
        {
            Challenge.Status = await response.Content.ReadFromJsonAsync<Status>();
            var bid = Challenge.Members.FirstOrDefault(x => x.Id == id);
            if (bid != null)
                bid.IsApproved = false;
            await HubConnection.InvokeAsync("SendWagerMember", WagerChallenge.Group(Challenge.Id), bid, new IdStatus { Status = Challenge.Status, Id = Challenge.Id });
        }
    }

    private async Task AcceptBid(int id)
    {
        var response = await http.Client.PutAsJsonAsync<string>($"/api/bid/wager/challenge/accept/{id}", SecretSeed);
        if (response.IsSuccessStatusCode)
        {
            Challenge.Status = await response.Content.ReadFromJsonAsync<Status>();
            var bid = Challenge.Members.FirstOrDefault(x => x.Id == id);
            if (bid != null)
                bid.IsApproved = true;
            await HubConnection.InvokeAsync("SendWagerChallengeBid", WagerChallenge.Group(Challenge.Id), bid, new IdStatus { Status = Challenge.Status, Id = Challenge.Id });
        }
    }
}
