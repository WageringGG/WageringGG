@layout MainLayout
@inherits LayoutComponentBase
@inject AuthHttp http
@inject ISessionStorageService sessionStorage
@attribute [Microsoft.AspNetCore.Authorization.Authorize]

<div class="row my-2">
    <div class="col-12 col-sm-4 my-2">
        <div class="list-group" role="tablist">
            <NavLink class="list-group-item list-group-item-action d-flex align-items-center" href="/client/wagers/pending" role="tab">
                Pending <span class="badge badge-info ml-auto">@Data.Where(x => x.Status == (byte)Status.Pending).Count()</span>
            </NavLink>
            <NavLink class="list-group-item list-group-item-action d-flex align-items-center" href="/client/wagers/confirmed" role="tab">
                Confirmed <span class="badge badge-info ml-auto">@Data.Where(x => x.Status == (byte)Status.Confirmed).Count()</span>
            </NavLink>
            <NavLink class="list-group-item list-group-item-action d-flex align-items-center" href="/client/wagers/ongoing" role="tab">Ongoing</NavLink>
            <NavLink class="list-group-item list-group-item-action d-flex align-items-center" href="/client/wagers/completed" role="tab">Completed</NavLink>
        </div>
    </div>
    <div class="col-12 col-sm-8">
        <div class="tab-content">
            <div class="tab-pane active" role="tabpanel">
                <CascadingValue TValue="IEnumerable<WagerChallenge>" Value="Data">
                    @Body
                </CascadingValue>
            </div>
        </div>
    </div>
</div>

@code{
    public IEnumerable<WagerChallenge> Data { get; set; } = Enumerable.Empty<WagerChallenge>();
    protected override async Task OnInitializedAsync()
    {
        sessionStorage.Changed += SessionStorageChanged;
        var response = await http.Client.GetAsync("/api/client/wagers");
        if (response.IsSuccessStatusCode)
        {
            Data = await response.Content.ReadFromJsonAsync<IEnumerable<WagerChallenge>>();
            Data = Data.OrderByDescending(x => x.Date);
        }
        await base.OnInitializedAsync();
    }

    private void SessionStorageChanged(object sender, Blazored.SessionStorage.ChangedEventArgs e)
    {
        if (e.Key == "WagerStatus")
        {
            var data = (WagerStatus)e.NewValue;
            var wager = Data.FirstOrDefault(x => x.Id == data.WagerId);
            if (wager != null)
            {
                wager.Status = data.Status;
                StateHasChanged();
            }
        }
    }
}